(subsub "Basic mathematical operators" (
	(XML:p ("
	BearLang has 4 basic mathematical operators (the rest are in library code and not strictly considered builtins).
	These operators are: + - / *
	"))


	(XML:p ("
	The 4 basic mathematical operators behave mostly as you'd expect, the parameters are numbers, and they return numbers, in most cases.
	An exception to this rule is the + operator, which can optionally return strings."))

	(XML:p ("For example:"))

	(codesample (
		">>> (+ 2 3)\n"
		(+ 2 3)
	))

	(XML:p "And ")

	(codesample (
		">>> (+ \"Hello \" \"world\")\n"
		(+ "Hello " "world")
	))

	(XML:p ("
	With the exception of the + operator, all the mathematical opers take 2 parameters. See below for some examples:"))

	(codesample (
		">>> (+ 2 2)\n"
		(+ 2 2)
	))
	
	(codesample (
		">>> (- 5 3)\n"
		(- 5 3)
	))

	(codesample (
		">>> (/ 12 2)\n"
		(/ 12 2)

	))

	(codesample (
		">>> (* 2 24)\n"
		(* 2 24)
	))
	
	))

(subsub "Comparision and conditional opers" (
	(XML:p ("
	Basic comparisions are available via the comparision/equality operators: eq == lt gt
	"))
	
	(XML:p ("
	These comparision operators return boolean values that can be used within an if statement, if statements have the following form:
	"))

	(codesample ("
(if condition
     then-action
     else-action)\n"
	))

	(XML:p ("
	In order to have multiple expressions evaluated inside then-action and else-action, the do oper can be used:
	"))

	; print oper is a special case, so we just manually enter the return value here
	(codesample (
		">>> (do (print 1) (print 2))\n"
		"12"
	))

	(XML:p ("
	This is intended for use within the if oper, like this:
	"))

	(codesample (
		">>> (if (eq 2 2) (do (print \"The universe is right, because \") (print \"2 is still 2\")))\n"
		"The universe is right, because 2 is still 2"
	))

	))

(subsub "Functions and custom opers" (

	(XML:p ("
	In BearLang, operators (known as opers for short) are similar to functions with a core difference: they execute within their parent context and their arguments are NOT
	evaluated before the body of the oper is evaluated. Functions on the other hand create a new context to execute within and write only to their own context (but may read
	from the parent context or higher up the context hiearchy until hitting root).
	"))

	(XML:p ("
	Both functions and opers are first-class, meaning you can assign them to variables etc.
	"))

	(XML:p ("An example function definition is shown below:"))

	(codesample ( "
	     
>>> (fun fib (n) 
	 (if (lt n 2) 1 
	     (+ n (- n 1))))\n"

	(fun fib (n)
	     (if (lt n 2) 1
	         (+ n (- n 1))))))

	(XML:p ("This will create the function and assign it to the symbol fib."))

	))

language design:
   +,-,/,* operators etc
   lambdas:
       (fn (params...) body)
   function definitions
       (fun func_name (params ...) body)


runtime lib:
   C-side data types
   parses s-expressions from strings
   evaluates s-expressions
   FFI for external integration

   bearlang/common.h - stuff common to all library users (like init etc)
       bl_init()      - init the library ready for use, can be run multiple times

   bearlang/ctx.h - contexts and evaluation
       bl_ctx_new_std() - create a new stdlib context, should be used as parent of end user code, contains core functionality

       bl_ctx_new()   - create a new context, optionally with a parent context
       bl_ctx_close() - close a context
       bl_ctx_eval()  - evaluate an expression within a context

       bl_ctx_set()   - set the value of a symbol in a context
       bl_ctx_get()   - lookup the value of a symbol in a context, if not found tries the parent, returns NULL on failure

   bearlang/types.h - type definitions etc
       bl_ast_t - struct that defines an AST

   bearlang/sexp.h - S-expression and AST stuff
       bl_parse_sexp() - returns an AST
       bl_ser_sexp()   - serialises an S-expression (from an AST)

       bl_read_ast()   - convert an AST into a pure expression

   bearlang/list_ops.h - list operations, it is a lisp after all....
       bl_first()   - returns the first item in a list (the car)
       bl_second()  - returns the first item in the rest of the list (equivalent to bl_first(bl_rest(L)) )
       bl_rest()    - returns the rest of the list
       bl_append()  - appends to the end of a list
       bl_prepend() - prepends to the start of a list
